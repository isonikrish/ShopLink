generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  name     String
  password String
  shops    Shop[]
  cart     CartItem[]
  orders   Order[]
}

model Shop {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  ownerId       Int
  owner         User     @relation(fields: [ownerId], references: [id])
  logo          String?
  theme         String?
  description   String?
  facebook_url  String?
  instagram_url String?
  youtube_url   String?
  x_url         String?
  email         String?
  phone         String?
  address       String?
  categories    String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  products Product[]
}

model Product {
  id           Int        @id @default(autoincrement())
  name         String
  description  String
  productImage String
  shopId       Int
  shop         Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  price        Float
  variants     Variant[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  category     String
  stock        Int?       @default(0)
  cart         CartItem[]
}

model Variant {
  id          Int     @id @default(autoincrement())
  productId   Int
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantType String
  variantName String
}

model CartItem {
  id               Int     @id @default(autoincrement())
  userId           Int
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId        Int
  product          Product @relation(fields: [productId], references: [id])
  selectedVariants Json
  quantity         Int     @default(1)
  orderId          Int?
  order            Order?  @relation(fields: [orderId], references: [id])
}

model Order {
  id      Int         @id @default(autoincrement())
  phone   String
  country String
  state   String
  city    String
  address String
  userId  Int
  user    User        @relation(fields: [userId], references: [id])
  items   CartItem[]
  status  OrderStatus @default(placed)
}

enum OrderStatus {
  placed
  dispatched //shipped order
  out //out for delivery
  delivered // order delivered
  cancelled // order canceled
}
